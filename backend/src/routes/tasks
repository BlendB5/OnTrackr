import { Router, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { authenticateToken } from '../middleware/auth';

const router = Router();
const prisma = new PrismaClient();

// Get all tasks for a user
router.get('/', authenticateToken, async (req: any, res) => {
  try {
    const { status, dueDate } = req.query;
    
    const where: any = { userId: req.user.id };
    
    if (status) {
      where.status = status;
    }
    
    if (dueDate) {
      const date = new Date(dueDate as string);
      const nextDay = new Date(date);
      nextDay.setDate(date.getDate() + 1);
      
      where.dueDate = {
        gte: date,
        lt: nextDay
      };
    }

    const tasks = await prisma.task.findMany({
      where,
      orderBy: { dueDate: 'asc' }
    });
    
    res.json(tasks);
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ error: 'Failed to fetch tasks' });
  }
});

// Create a new task
router.post('/', 
  authenticateToken,
  async (req: any, res: Response) => {
    try {

      const { title, dueDate, reminder, status = 'pending' } = req.body;

      const task = await prisma.task.create({
        data: {
          title,
          dueDate: new Date(dueDate),
          reminder: reminder ? new Date(reminder) : null,
          status,
          userId: req.user.id
        }
      });

      res.status(201).json(task);
    } catch (error) {
      console.error('Error creating task:', error);
      res.status(500).json({ error: 'Failed to create task' });
    }
  }
);

// Update a task
router.put('/:id', 
  authenticateToken,
  async (req: any, res: Response) => {
    try {

      const { id } = req.params;
      const { title, dueDate, reminder, status } = req.body;

      // Check if task exists and belongs to user
      const existingTask = await prisma.task.findFirst({
        where: { id, userId: req.user.id }
      });

      if (!existingTask) {
        return res.status(404).json({ error: 'Task not found' });
      }

      const task = await prisma.task.update({
        where: { id },
        data: {
          ...(title && { title }),
          ...(dueDate && { dueDate: new Date(dueDate) }),
          ...(reminder !== undefined && { reminder: reminder ? new Date(reminder) : null }),
          ...(status && { status })
        }
      });

      res.json(task);
    } catch (error) {
      console.error('Error updating task:', error);
      res.status(500).json({ error: 'Failed to update task' });
    }
  }
);

// Toggle task status (pending <-> done)
router.patch('/:id/toggle', authenticateToken, async (req: any, res) => {
  try {
    const { id } = req.params;

    // Check if task exists and belongs to user
    const existingTask = await prisma.task.findFirst({
      where: { id, userId: req.user.id }
    });

    if (!existingTask) {
      return res.status(404).json({ error: 'Task not found' });
    }

    const task = await prisma.task.update({
      where: { id },
      data: {
        status: existingTask.status === 'pending' ? 'done' : 'pending'
      }
    });

    res.json(task);
  } catch (error) {
    console.error('Error toggling task:', error);
    res.status(500).json({ error: 'Failed to toggle task' });
  }
);

// Delete a task
router.delete('/:id', authenticateToken, async (req: any, res) => {
  try {
    const { id } = req.params;

    // Check if task exists and belongs to user
    const existingTask = await prisma.task.findFirst({
      where: { id, userId: req.user.id }
    });

    if (!existingTask) {
      return res.status(404).json({ error: 'Task not found' });
    }

    await prisma.task.delete({
      where: { id }
    });

    res.status(204).send();
  } catch (error) {
    console.error('Error deleting task:', error);
    res.status(500).json({ error: 'Failed to delete task' });
  }
});

export default router;
