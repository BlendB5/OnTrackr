import { Router, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { authenticateToken } from '../middleware/auth';

const router = Router();
const prisma = new PrismaClient();

// Get all events for a user
router.get('/', authenticateToken, async (req: any, res) => {
  try {
    const events = await prisma.event.findMany({
      where: { userId: req.user.id },
      orderBy: { date: 'asc' }
    });
    res.json(events);
  } catch (error) {
    console.error('Error fetching events:', error);
    res.status(500).json({ error: 'Failed to fetch events' });
  }
});

// Get events for a specific date range
router.get('/range', authenticateToken, async (req: any, res) => {
  try {
    const { startDate, endDate } = req.query;
    
    if (!startDate || !endDate) {
      return res.status(400).json({ error: 'Start date and end date are required' });
    }

    const events = await prisma.event.findMany({
      where: {
        userId: req.user.id,
        date: {
          gte: new Date(startDate as string),
          lte: new Date(endDate as string)
        }
      },
      orderBy: { date: 'asc' }
    });
    
    res.json(events);
  } catch (error) {
    console.error('Error fetching events by range:', error);
    res.status(500).json({ error: 'Failed to fetch events' });
  }
});

// Create a new event
router.post('/', 
  authenticateToken,
  async (req: any, res: Response) => {
    try {

      const { title, description, date } = req.body;

      const event = await prisma.event.create({
        data: {
          title,
          description,
          date: new Date(date),
          userId: req.user.id
        }
      });

      res.status(201).json(event);
    } catch (error) {
      console.error('Error creating event:', error);
      res.status(500).json({ error: 'Failed to create event' });
    }
  }
);

// Update an event
router.put('/:id', 
  authenticateToken,
  async (req: any, res: Response) => {
    try {

      const { id } = req.params;
      const { title, description, date } = req.body;

      // Check if event exists and belongs to user
      const existingEvent = await prisma.event.findFirst({
        where: { id, userId: req.user.id }
      });

      if (!existingEvent) {
        return res.status(404).json({ error: 'Event not found' });
      }

      const event = await prisma.event.update({
        where: { id },
        data: {
          ...(title && { title }),
          ...(description !== undefined && { description }),
          ...(date && { date: new Date(date) })
        }
      });

      res.json(event);
    } catch (error) {
      console.error('Error updating event:', error);
      res.status(500).json({ error: 'Failed to update event' });
    }
  }
);

// Delete an event
router.delete('/:id', authenticateToken, async (req: any, res) => {
  try {
    const { id } = req.params;

    // Check if event exists and belongs to user
    const existingEvent = await prisma.event.findFirst({
      where: { id, userId: req.user.id }
    });

    if (!existingEvent) {
      return res.status(404).json({ error: 'Event not found' });
    }

    await prisma.event.delete({
      where: { id }
    });

    res.status(204).send();
  } catch (error) {
    console.error('Error deleting event:', error);
    res.status(500).json({ error: 'Failed to delete event' });
  }
});

export default router;
